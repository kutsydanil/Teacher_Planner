import asyncio
import os
import logging
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

logger = logging.getLogger(__name__)
main_router = Router()

def get_main_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è"),
                KeyboardButton(text="üìÜ –ó–∞–≤—Ç—Ä–∞"),
                KeyboardButton(text="üóì –ù–µ–¥–µ–ª—è")
            ],
            [
                KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                KeyboardButton(text="üÜò –ü–æ–º–æ—â—å")
            ],
            [
                KeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ")
            ]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

@main_router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )

@main_router.message(F.text == "üìÖ –°–µ–≥–æ–¥–Ω—è")
async def handle_today(message: types.Message):
    await message.answer("‚åõÔ∏è –°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

@main_router.message(F.text == "üìÜ –ó–∞–≤—Ç—Ä–∞")
async def handle_tomorrow(message: types.Message):
    await message.answer("‚åõÔ∏è –°–æ–±—ã—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

@main_router.message(F.text == "üóì –ù–µ–¥–µ–ª—è")
async def handle_week(message: types.Message):
    await message.answer("‚åõÔ∏è –°–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

@main_router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def handle_settings(message: types.Message):
    await message.answer("‚öôÔ∏è –†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

@main_router.message(F.text == "üÜò –ü–æ–º–æ—â—å")
async def handle_help(message: types.Message):
    await message.answer("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

@main_router.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def handle_about(message: types.Message):
    about_text = (
        "ü§ñ <b>–£–º–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏ Google Calendar\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Zoom/Google Meet\n\n"
        "–í–µ—Ä—Å–∏—è: 1.0\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –®—É—Ö-–∏–Ω—Ç–µ—Ä–ø—Ä–∞–π—Å"
    )
    await message.answer(about_text, parse_mode="HTML")

    

async def main():
    load_dotenv()
    BOT_TOKEN = os.environ.get("BOT_TOKEN")
    bot = Bot(BOT_TOKEN)
    dp = Dispatcher()
    
    dp.include_router(main_router)
    
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())